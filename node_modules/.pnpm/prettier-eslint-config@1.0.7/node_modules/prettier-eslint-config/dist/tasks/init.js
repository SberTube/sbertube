"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const utils_1 = require("../utils");
const fs_jetpack_1 = tslib_1.__importDefault(require("fs-jetpack"));
const path_1 = tslib_1.__importDefault(require("path"));
const child_process_1 = tslib_1.__importDefault(require("child_process"));
const ora_1 = tslib_1.__importDefault(require("ora"));
const merge_1 = require("../utils/merge");
/**
 * cli初始化方法
 * @description 提供给用户选择模板类型，目前提供js和ts模板
 */
const init = async () => {
    // const describe = ' 请选择项目模板';
    // const list = ['js', 'ts'];
    // const answer = await createPrompt(describe, list);
    createEslintrc();
    createPrettierrc();
    // switch (answer) {
    // 	case list[0]:
    // 		// TODO
    // 		createEslintrc();
    // 		createPrettierrc();
    // 		break;
    // 	case list[1]:
    // 		// TODO
    // 		createEslintrc();
    // 		createPrettierrc();
    // 		break;
    // 	default:
    // 		logger.error('❌请选择对应的项目模板');
    // 		break;
    // }
    utils_1.logger.success('🎉 配置完成！');
    installDependencies();
};
// 模板文件的路径
const templatePath = path_1.default.resolve(__dirname, '../../templates');
/**
 * 创建eslint规则文件
 */
const createEslintrc = () => {
    const cwd_path = process.cwd();
    const has_eslintrc = fs_jetpack_1.default.find(cwd_path, { matching: ['./.eslintrc.*'] });
    // 文件名
    const filename = '.eslintrc.js';
    // 不存在已有eslint配置
    if (has_eslintrc.length === 0) {
        utils_1.logger.primary('🏄🏻 创建eslint文件...');
        // 从模板中复制到项目目录中
        fs_jetpack_1.default.copy(path_1.default.resolve(templatePath, filename), path_1.default.resolve(cwd_path, filename));
    }
    else {
        // 已有相关eslint配置
        utils_1.logger.warning('❗️已有eslint相关配置文件，是否删除已有配置');
        // TODO: 进行配置合并
    }
};
/**
 * 创建prettier规则文件
 */
const createPrettierrc = () => {
    const cwd_path = process.cwd();
    const has_prettierrc = fs_jetpack_1.default.find(cwd_path, { matching: ['./.prettierrc.*'] });
    const filename = '.prettierrc.js';
    if (has_prettierrc.length === 0) {
        utils_1.logger.primary('🏄🏻 创建prettier文件...');
        // 从模板中复制到项目目录中
        try {
            fs_jetpack_1.default.copy(path_1.default.resolve(templatePath, filename), path_1.default.resolve(cwd_path, filename));
        }
        catch (error) {
            utils_1.logger.error(`❌ 配置失败 ${error}`);
        }
    }
    else {
        // 已有相关eslint配置
        utils_1.logger.warning('❗️已有prettier相关配置文件，即将进行文件合并');
        // JS文件合并
        (0, merge_1.mergeJSFile)(has_prettierrc[0]);
    }
};
/**
 * 安装所需要的依赖
 */
const installDependencies = async () => {
    utils_1.logger.primary('依赖注入中...');
    // 新增依赖
    const devDependencies = {
        eslint: '^7.32.0',
        prettier: '^2.3.2',
        '@typescript-eslint/parser': '^4.30.0',
        '@typescript-eslint/eslint-plugin': '^2.31.0',
        'eslint-config-prettier': '^6.11.0',
        'eslint-plugin-prettier': '^3.1.3',
    };
    const package_path = path_1.default.resolve(fs_jetpack_1.default.cwd(), 'package.json');
    const package_file = fs_jetpack_1.default.exists(package_path);
    // 文件不存在
    if (!package_file) {
        // 执行初始化命令
        await child_process_1.default.exec('npm init -y');
    }
    const content = fs_jetpack_1.default.read(package_path, 'json');
    // 合并配置
    content.devDependencies = Object.assign(Object.assign({}, content.devDependencies), devDependencies);
    await fs_jetpack_1.default.writeAsync(package_path, content);
    utils_1.logger.success('依赖注入成功！');
    // 选择安装依赖的工具
    const describe = ' 请选择您信赖的依赖安装工具';
    const list = ['npm', 'yarn', '达咩:)'];
    const answer = await (0, utils_1.createPrompt)(describe, list);
    // 用户选择手动安装
    if (answer === list[2]) {
        utils_1.logger.warning('为了确保插件生效，请手动执行 npm i 或者 yarn 安装新增的依赖');
        return;
    }
    const loading = (0, ora_1.default)('😄 依赖安装中，可以打个哈欠休息一下').start();
    try {
        const prefix = answer === list[0] ? 'npm install' : 'yarn add';
        let res = `${prefix} `;
        for (let key in devDependencies) {
            res += `${key}@${devDependencies[key]} `;
        }
        child_process_1.default.exec(res, (error, stdout) => {
            if (error !== null) {
                console.log('exec error: ' + error);
            }
            utils_1.logger.primary(`\r\n${stdout}`);
            loading.stop();
            loading.succeed('依赖安装成功，尽情使用吧~');
        });
    }
    catch (err) {
        utils_1.logger.error(err.message);
    }
};
exports.default = init;
