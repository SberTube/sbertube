"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeJSFile = void 0;
const tslib_1 = require("tslib");
// @ts-nocheck
const parser_1 = require("@babel/parser");
const traverse_1 = tslib_1.__importDefault(require("@babel/traverse"));
const generator_1 = tslib_1.__importDefault(require("@babel/generator"));
const t = tslib_1.__importStar(require("@babel/types"));
const fs_jetpack_1 = tslib_1.__importDefault(require("fs-jetpack"));
const yamljs_1 = tslib_1.__importDefault(require("yamljs"));
const path_1 = tslib_1.__importDefault(require("path"));
const mergeJSFile = (filename) => {
    let code = fs_jetpack_1.default.read(path_1.default.resolve(fs_jetpack_1.default.cwd(), filename));
    // 如果是JSON格式的文件需要处理一下
    if (filename.split('.').includes('json')) {
        code = `module.exports = ${code}`;
    }
    else if (filename.split('.').includes('yaml')) {
        code = JSON.stringify(yamljs_1.default.parse(code));
        code = `module.exports = ${code}`;
    }
    const template = require(path_1.default.resolve(__dirname, `../../templates/.prettierrc.js`));
    const ast = (0, parser_1.parse)(code || '');
    (0, traverse_1.default)(ast, {
        ObjectProperty: p => {
            const name = p.node.key.name;
            if (template[name] !== undefined) {
                p.node.value.value = template[name];
                delete template[name];
            }
        },
    });
    console.log(template);
    // 插入剩余的属性
    for (let key in template) {
        let value;
        switch (typeof template[key]) {
            case 'string':
                value = t.stringLiteral(template[key]);
                break;
            case 'number':
                value = t.numericLiteral(template[key]);
                break;
            case 'boolean':
                value = t.booleanLiteral(template[key]);
                break;
        }
        ast.program.body[0].expression.right.properties.push(t.objectProperty(t.identifier(key), value));
    }
    const output = (0, generator_1.default)(ast, {}, code);
    fs_jetpack_1.default.write(path_1.default.resolve(fs_jetpack_1.default.cwd(), filename), output.code);
    filename !== '.prettierrc.js' &&
        fs_jetpack_1.default.rename(path_1.default.resolve(fs_jetpack_1.default.cwd(), filename), '.prettierrc.js');
};
exports.mergeJSFile = mergeJSFile;
